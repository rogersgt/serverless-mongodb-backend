AWSTemplateFormatVersion: '2010-09-09'
Description: MongoDB Service


Parameters:
  InstanceType:
    Type: String
    Description: Size of the VM(s) to run the MongoDB container(s) on
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5a.4xlarge
      - m5a.24xlarge

  WhitelistCidrIp:
    Type: String
    Description: To Allow single Ip address, append /32
    Default: 0.0.0.0/0

  MongoVersion:
    Type: String
    Description: mongo docker image tag to specify version
    Default: latest
    AllowedValues:
      - latest
      - '4.1'
      - '4'
      - '3.6'
      - '3.4'

  DBStorage:
    Type: String
    Description: Amount of memory allocated to MongoDB Docker Engine
    Default: 10GB
    AllowedValues:
      - 5GB
      - 10GB
      - 25GB
      - 50GB
      - 75GB
      - 100GB
      - 250GB
      - 500GB
      - 1000GB
      - 2000GB

  Iops:
    Type: Number
    Default: 100

  Stage:
    Type: String
    Description: Semantic name for this environment
    Default: dev

  LogRetention:
    Type: Number
    Description: Number of days to keep logs in CloudWatch
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 14
      - 30
      - 365
      - 730
      - 1095

  KeyPairName:
    Description: Name of a pre-existing EC2 SSH Key. Leave Blank to launch with no SSH Key.
    Type: String

  ImageId:
    Description: AMI Backup to restore DB Instance(s) from. Leave Blank for a new DB Instance/DB cluster.
    Type: String

  SSHAllowedOriginIP:
    Type: String
    Description: Leave blank to close port 22

  MasterUsername:
    Type: String
    NoEcho: true
    Description: MongoDB Master username
    Default: admin

  MasterPassword:
    Type: String
    NoEcho: true
    Description: MongoDB Master password


Mappings:
  ConfigByRegion:
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-0b59bfac6be064b78
    us-west-2:
      AMI: ami-a0cfeed8
    us-west-1:
      AMI: ami-0bdb828fd58c52235
    eu-west-3:
      AMI: ami-0ebc281c20e89ba4b
    eu-west-2:
      AMI: ami-f976839e
    eu-west-1:
      AMI: ami-047bb4163c506cd98

  Options:
    VolumeSize:
      5GB: 8
      10GB: 12
      25GB: 30
      50GB: 60
      75GB: 85
      100GB: 110
      250GB: 270
      500GB: 520
      1000GB: 1020


Conditions:
  UseImage: !Not [!Equals [!Ref 'ImageId', '']]
  UseSSHKey: !Not [!Equals [!Ref 'KeyPairName', '']]
  OpenSSHPort: !And
  - !Not [!Equals [!Ref 'SSHAllowedOriginIP', '']]
  - !Condition UseSSHKey


Resources:
  PrimaryIp:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Instance1

  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies: 
        - PolicyName: !Sub 'mongodb-${Stage}-logs-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:Put*
                Resource:
                  - !GetAtt DBLogGroup.Arn
                  - !Sub
                    - '${logGroupArn}/*'
                    - logGroupArn: !GetAtt DBLogGroup.Arn
      RoleName: !Sub 'mongodb-${Stage}'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub 'mongodb-${Stage}'
      Path: '/'
      Roles: 
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com 
            Action: 
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: !Sub 'mongodb-${Stage}-logs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:Create*
                  - logs:Put*
                Resource:
                  - !GetAtt DBLogGroup.Arn
                  - !Sub
                    - '${arn}/*'
                    - arn: !GetAtt DBLogGroup.Arn
        - PolicyName: !Sub 'mongodb-${Stage}-ssm'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:Get*
                  - ssm:Describe*
                  - kms:Create*
                  - kms:Decrypt
                  - kms:Describe*
                  - kms:GenerateDataKey*
                  - kms:Get*
                Resource: '*'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref 'Stage'
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: Stage
        SecurityGroups:
          - !Ref SecurityGroup
        ImageId: !If
          - UseImage
          - !Ref 'ImageId'
          - !FindInMap [ConfigByRegion, !Ref 'AWS::Region', AMI]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceType: !Ref 'InstanceType'
        KeyName: !If [UseSSHKey, !Ref 'KeyPairName', !Ref 'AWS::NoValue']
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: !FindInMap [Options, VolumeSize, !Ref 'DBStorage']
              Iops: !Ref 'Iops'
              VolumeType: io1
              Encrypted: true
            DeviceName: /dev/xvda
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                sudo yum update -y
                # install docker
                sudo yum install -y docker
                # set docker storage per parameter
                cloud-init-per once \
                  docker_options echo '--storage-opt dm.basesize=${DockerStorage}' >> /etc/sysconfig/docker &&\
                  echo "fs.file-max = 64000" >> /etc/sysctl.conf
                sudo service docker start
                # allow non-root user to access docker for troubleshooting
                sudo usermod -a -G docker ec2-user
                sudo docker run -d \
                  -v /home/ec2-user/data:/data \
                  -p 27017:27017 \
                  -e "MONGO_INITDB_ROOT_USERNAME=${MasterUsername}" \
                  -e "MONGO_INITDB_ROOT_PASSWORD=${MasterPassword}" \
                  --name mongo \
                  --restart=always \
                  --log-driver awslogs \
                  --log-opt awslogs-region=${AWS::Region} \
                  --log-opt awslogs-group=${LogGroup} \
                  mongo:${MongoVersion}
                # write the startup command on a shell file
                echo "sudo docker run -d \
                  -v /home/ec2-user/data:/data \
                  -p 27017:27017 \
                  --name mongo \
                  --restart=always \
                  --log-driver awslogs \
                  --log-opt awslogs-region=${AWS::Region} \
                  --log-opt awslogs-group=${LogGroup} \
                  mongo:${MongoVersion}" >> /home/ec2-user/start.sh
                chmod +x /home/ec2-user/start.sh
                # set cron to start mongodb docker on reboot
                crontab -l | { cat; echo "@reboot /home/ec2-user/start.sh"; } | crontab -
              - DockerStorage: !Ref DBStorage
                MongoVersion: !Ref 'MongoVersion'
                LogGroup: !Ref DBLogGroup

  DBLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'mongodb-${Stage}'
      RetentionInDays: !Ref 'LogRetention'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [MongoDB, !Ref 'AWS::StackId']]
      GroupDescription: Security Group for MongoDB cluster
      SecurityGroupIngress:
        - CidrIp: !Ref 'WhitelistCidrIp'
          FromPort: 27017
          ToPort: 27017
          IpProtocol: tcp

  SSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: OpenSSHPort
    Properties:
      GroupName: !Ref SecurityGroup
      CidrIp: !Sub '${SSHAllowedOriginIP}/32'
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'mongodb-${Stage}'
      DashboardBody: !Sub
        - '{
            "widgets": [
                {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 6,
                    "height": 6,
                    "properties": {
                        "view": "timeSeries",
                        "stacked": true,
                        "metrics": [
                            [ "AWS/EC2", "CPUUtilization", "InstanceId", "${instanceId}" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "CPU Utilization"
                    }
                },
                {
                    "type": "metric",
                    "x": 6,
                    "y": 0,
                    "width": 6,
                    "height": 6,
                    "properties": {
                        "view": "timeSeries",
                        "stacked": true,
                        "metrics": [
                            [ "AWS/EC2", "DiskReadOps", "InstanceId", "${instanceId}" ],
                            [ ".", "DiskWriteOps", ".", "." ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Disk Ops",
                        "period": 300
                    }
                },
                {
                    "type": "metric",
                    "x": 12,
                    "y": 0,
                    "width": 6,
                    "height": 6,
                    "properties": {
                        "view": "timeSeries",
                        "stacked": true,
                        "metrics": [
                            [ "AWS/EC2", "NetworkPacketsIn", "InstanceId", "${instanceId}" ],
                            [ ".", "NetworkPacketsOut", ".", "." ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Network Packets"
                    }
                }
            ]
        }'
        - instanceId: !Ref Instance1


Outputs:
  Writer:
    Value: !Ref Instance1
    Description: EC2 Instance that hosts the writer MongoDB container

  DbHost:
    Value: !Ref PrimaryIp
    Export:
      Name: mongodb-cluster-host

  Dashboard:
    Value: !Ref Dashboard

  DbLogs:
    Value: !Ref DBLogGroup
